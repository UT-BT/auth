// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.833
package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func Callback() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<h1 class=\"text-3xl font-bold\">Logging in...</h1><p class=\"text-base-content/70\">Please wait while we log you in.</p><div class=\"loading loading-spinner loading-lg text-primary\"></div><script>\r\n            const hash = window.location.hash.substring(1);\r\n            if (hash) {\r\n                const params = {};\r\n                hash.split('&').forEach(pair => {\r\n                    const [key, value] = pair.split('=');\r\n                    params[key] = decodeURIComponent(value);\r\n                });\r\n\r\n                // Store tokens in localStorage temporarily\r\n                const expiresIn = parseInt(params.expires_in || '3600');\r\n                const expiresAt = Math.floor(Date.now() / 1000) + expiresIn;\r\n                \r\n                const clientTokens = {\r\n                    access_token: params.access_token,\r\n                    refresh_token: params.refresh_token,\r\n                    expires_at: expiresAt,\r\n                    provider_token: params.provider_token,\r\n                    provider_refresh_token: params.provider_refresh_token\r\n                };\r\n                localStorage.setItem('auth_tokens', JSON.stringify(clientTokens));\r\n\r\n                // Store auth tokens in cookies via API\r\n                fetch('/api/store-auth', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        'Authorization': `Bearer ${params.access_token}`\r\n                    },\r\n                    body: JSON.stringify({\r\n                        refresh_token: params.refresh_token,\r\n                        provider_token: params.provider_token,\r\n                        provider_refresh_token: params.provider_refresh_token\r\n                    }),\r\n                    credentials: 'include'\r\n                }).then(response => {\r\n                    if (!response.ok) {\r\n                        throw new Error('Failed to store auth tokens');\r\n                    }\r\n                    // Clean up localStorage after successful cookie storage\r\n                    localStorage.removeItem('auth_tokens');\r\n                    // Add a small delay to ensure cookies are set\r\n                    setTimeout(() => {\r\n                        window.location.href = '/';\r\n                    }, 500);\r\n                }).catch(error => {\r\n                    console.error('Failed to store auth tokens:', error);\r\n                    localStorage.removeItem('auth_tokens');\r\n                    window.location.href = '/?error=auth_storage_failed';\r\n                });\r\n            } else {\r\n                window.location.href = '/?error=no_auth_data';\r\n            }\r\n        </script>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = Base("Loading...").Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
