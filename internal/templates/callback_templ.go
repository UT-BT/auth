// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.833
package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func Callback() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<h1 class=\"text-3xl font-bold\">Logging in...</h1><p class=\"text-base-content/70\">Please wait while we log you in.</p><div class=\"loading loading-spinner loading-lg text-primary\"></div><script>\n            const hash = window.location.hash.substring(1);\n            if (hash) {\n                const params = {};\n                hash.split('&').forEach(pair => {\n                    const [key, value] = pair.split('=');\n                    params[key] = decodeURIComponent(value);\n                });\n\n                // Store tokens in localStorage temporarily\n                const expiresIn = parseInt(params.expires_in || '3600');\n                const expiresAt = Math.floor(Date.now() / 1000) + expiresIn;\n                \n                const clientTokens = {\n                    access_token: params.access_token,\n                    refresh_token: params.refresh_token,\n                    expires_at: expiresAt,\n                    provider_refresh_token: params.provider_refresh_token\n                };\n                localStorage.setItem('auth_tokens', JSON.stringify(clientTokens));\n\n                // Store auth tokens in cookies via API\n                fetch('/api/store-auth', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Authorization': `Bearer ${params.access_token}`\n                    },\n                    body: JSON.stringify({\n                        refresh_token: params.refresh_token,\n                        provider_refresh_token: params.provider_refresh_token\n                    }),\n                    credentials: 'include'\n                }).then(response => {\n                    if (!response.ok) {\n                        throw new Error('Failed to store auth tokens');\n                    }\n                    // Clean up localStorage after successful cookie storage\n                    localStorage.removeItem('auth_tokens');\n                    // Add a small delay to ensure cookies are set\n                    setTimeout(() => {\n                        window.location.href = '/';\n                    }, 500);\n                }).catch(error => {\n                    console.error('Failed to store auth tokens:', error);\n                    localStorage.removeItem('auth_tokens');\n                    window.location.href = '/?error=auth_storage_failed';\n                });\n            } else {\n                window.location.href = '/?error=no_auth_data';\n            }\n        </script>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = Base("Loading...").Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
