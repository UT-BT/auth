#!/usr/bin/env bash

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color
BOLD='\033[1m'

SPINNER=('-' '\' '|' '/')

get_version() {
    echo "$(git log -1 --format="%h")-dev"
}

show_status() {
    local message=$1
    local cmd=$2
    local i=0
    local spin_len=${#SPINNER[@]}

    tput sc
    
    eval "$cmd" > /dev/null 2>&1 &
    local pid=$!
    
    while kill -0 $pid 2>/dev/null; do
        i=$(( i + 1 ))
        # Restore cursor position and print status
        tput rc
        printf "%b%b%b %s..." "${BLUE}" "${SPINNER[$((i % spin_len))]}" "${NC}" "${message}"
        sleep 0.2
    done

    wait $pid
    local exit_status=$?

    tput rc
    if [ $exit_status -eq 0 ]; then
        echo -e "${GREEN}✓${NC} ${message}${GREEN} (done)${NC}"
    else
        echo -e "${RED}×${NC} ${message}${RED} (failed)${NC}"
        echo "Exit status: $exit_status"
        echo "Command: $cmd"
        exit $exit_status
    fi
}

clean_command() {
    echo -e "\n${BOLD}Cleaning build artifacts...${NC}\n"
    show_status "Cleaning previous builds" "rm -f auth-* 2>/dev/null || true"
    show_status "Cleaning up Go dependencies" "go mod tidy"
    show_status "Cleaning Go test cache" "go clean -testcache"
}

build_command() {
    echo -e "\n${BOLD}Building server...${NC}\n"
    
    VERSION=$(get_version)
    echo -e "${BOLD}Building version:${NC} ${BLUE}${VERSION}${NC}\n"

    show_status "Formatting code" "go fmt ./..."
    
    if [[ "$OSTYPE" == "msys"* ]] || [[ "$OSTYPE" == "cygwin"* ]]; then
        show_status "Building executable" "go build -ldflags \"-X main.version=${VERSION}\" -o auth-${VERSION}.exe ./cmd/server/main.go"
        echo -e "\n${GREEN}✓${NC} Build successful: ${BLUE}auth-${VERSION}.exe${NC}"
    else
        show_status "Building executable" "go build -ldflags \"-X main.version=${VERSION}\" -o auth-${VERSION} ./cmd/server/main.go"
        echo -e "\n${GREEN}✓${NC} Build successful: ${BLUE}auth-${VERSION}${NC}"
    fi
}

run_command() {
    VERSION=$(get_version)
    if [[ "$OSTYPE" == "msys"* ]] || [[ "$OSTYPE" == "cygwin"* ]]; then
        if [ ! -f "auth-${VERSION}.exe" ]; then
            echo -e "${YELLOW}Executable not found, building first...${NC}\n"
            build_command
        fi
        echo -e "\n${BOLD}Starting the server...${NC}"
        ./auth-${VERSION}.exe
    else
        if [ ! -f "auth-${VERSION}" ]; then
            echo -e "${YELLOW}Executable not found, building first...${NC}\n"
            build_command
        fi
        echo -e "\n${BOLD}Starting the server...${NC}"
        ./auth-${VERSION}
    fi
}

test_command() {
    echo -e "\n${BOLD}Running tests...${NC}\n"
    show_status "Running tests" "go test -v ./..."
}

dev_command() {
    echo -e "\n${BOLD}Starting development setup...${NC}\n"
    clean_command
    test_command
    build_command
    run_command
}

help_command() {
    echo -e "${BOLD}Usage:${NC}"
    echo -e "  ${YELLOW}./scripts/cli${NC} ${GREEN}<command>${NC}"
    echo -e "\n${BOLD}Available commands:${NC}"
    echo -e "  ${GREEN}build${NC}    Build the server executable"
    echo -e "  ${GREEN}run${NC}      Run the server (builds if needed)"
    echo -e "  ${GREEN}dev${NC}      Clean, build, and run the server"
    echo -e "  ${GREEN}test${NC}     Run tests"
    echo -e "  ${GREEN}clean${NC}    Clean build artifacts and dependencies"
    echo -e "  ${GREEN}help${NC}     Show this help message"
}

case "$1" in
    "build")
        build_command
        ;;
    "run")
        run_command
        ;;
    "dev")
        dev_command
        ;;
    "test")
        test_command
        ;;
    "clean")
        clean_command
        ;;
    "help"|"")
        help_command
        ;;
    *)
        echo -e "${RED}Error:${NC} Unknown command '$1'"
        help_command
        exit 1
        ;;
esac