#!/usr/bin/env bash

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;36m'
NC='\033[0m' # No Color
CHECK="✓"
CROSS="×"
SPINNER=('-' '\' '|' '/')

EXE_EXTENSION=""
if [[ "$(uname -s)" == *"MINGW"* ]] || [[ "$(uname -s)" == *"MSYS"* ]]; then
    EXE_EXTENSION=".exe"
fi

write_color_output() {
    local message="$1"
    local color="$2"
    
    echo -ne "${color}${message}${NC}"
}

get_version() {
    local git_version
    
    git_version=$(git log -1 --format='%h' 2>/dev/null)
    
    if [ -z "$git_version" ]; then
        echo "unknown-dev"
    else
        echo "${git_version}-dev"
    fi
}

show_status() {
    local message="$1"
    local command="$2"
    shift 2
    
    local i=0
    local original_cursor_top
    local spinner_char
    local start_line
    local success=false
    local output=""
    local error_output=""
    
    start_line=$(tput lines)
    
    eval "$command" > /tmp/cmd_output 2> /tmp/cmd_error &
    local cmd_pid=$!
    
    while kill -0 $cmd_pid 2>/dev/null; do
        spinner_char="${SPINNER[$((i % 4))]}"
        printf "\r%b%s%b %s..." "$BLUE" "$spinner_char" "$NC" "$message"
        sleep 0.2
        ((i++))
    done
    
    wait $cmd_pid
    local exit_code=$?
    
    output=$(<"/tmp/cmd_output")
    error_output=$(<"/tmp/cmd_error")
    
    if [ $exit_code -eq 0 ]; then
        echo -ne "\r${GREEN}${CHECK}${NC} ${message}"
        write_color_output " (done)" "${GREEN}"
        echo ""
        success=true
    else
        echo -ne "\r${RED}${CROSS}${NC} ${message}"
        write_color_output " (failed)" "${RED}"
        echo ""
        if [ -n "$error_output" ]; then
            echo -e "${RED}Error: $error_output${NC}"
        fi
        if [ -n "$output" ]; then
            echo -e "${RED}Output: $output${NC}"
        fi
        exit 1
    fi
    
    rm -f /tmp/cmd_output /tmp/cmd_error
    
    return $exit_code
}

start_clean_command() {
    echo -e "\nCleaning build artifacts...\n"
    
    show_status "Cleaning previous builds" "if ls auth-* &>/dev/null; then rm -f auth-*; fi"
    
    show_status "Cleaning up Go dependencies" "go mod tidy"
    
    show_status "Cleaning Go test cache" "go clean -testcache"
}

start_generate_command() {
    echo -e "\nGenerating HTMX templates...\n"
    show_status "Generating HTMX templates" "templ generate"
}

start_build_command() {
    echo -e "\nBuilding server...\n"

    VERSION=$(get_version)
    echo -n "Building version: "
    write_color_output "$VERSION" "$BLUE"
    echo -e "\n"
    
    show_status "Formatting code" "go fmt ./..."
    
    show_status "Building executable" "VERSION=$VERSION go build -ldflags \"-X main.version=$VERSION\" -o \"auth-$VERSION$EXE_EXTENSION\" ./cmd/server/main.go"
    
    echo -n -e "\n"
    write_color_output "$CHECK " "$GREEN"
    echo -n "Build successful: "
    write_color_output "auth-$VERSION$EXE_EXTENSION" "$BLUE"
    echo ""
}

start_run_command() {
    VERSION=$(get_version)
    exe_path="auth-$VERSION$EXE_EXTENSION"
    
    if [ ! -f "$exe_path" ]; then
        write_color_output "Executable not found, building first..." "$YELLOW"
        echo -e "\n"
        start_build_command
    fi
    
    if [ -f "$exe_path" ]; then
        echo -e "\nStarting the server..."
        chmod +x "./$exe_path"
        "./$exe_path"
    else
        write_color_output "Error: " "$RED"
        echo "Could not find executable $exe_path even after building"
        exit 1
    fi
}

start_test_command() {
    echo -e "\nRunning tests...\n"
    
    show_status "Running tests" "go test -v ./..."
}

start_dev_command() {
    echo -e "\nStarting development setup...\n"
    start_clean_command
    start_generate_command
    start_test_command
    start_build_command
    start_run_command
}

show_help_command() {
    echo "Usage:"
    echo -n "  "
    write_color_output "./auth.sh" "$YELLOW"
    echo -n " "
    write_color_output "<command>" "$GREEN"
    echo ""
    
    echo "Available commands:"
    echo -n "  "
    write_color_output "build" "$GREEN"
    echo "    Build the server executable"
    
    echo -n "  "
    write_color_output "run" "$GREEN"
    echo "      Run the server (builds if needed)"
    
    echo -n "  "
    write_color_output "dev" "$GREEN"
    echo "      Clean, build, and run the server"
    
    echo -n "  "
    write_color_output "test" "$GREEN"
    echo "     Run tests"
    
    echo -n "  "
    write_color_output "clean" "$GREEN"
    echo "    Clean build artifacts and dependencies"
    
    echo -n "  "
    write_color_output "help" "$GREEN"
    echo "     Show this help message"
}

if [[ "$1" == "-help" || "$1" == "/help" || "$1" == "-h" || "$1" == "--help" ]]; then
    show_help_command
    exit 0
fi

case "$1" in
    "build")
        start_build_command
        ;;
    "run")
        start_run_command
        ;;
    "dev")
        start_dev_command
        ;;
    "test")
        start_test_command
        ;;
    "clean")
        start_clean_command
        ;;
    "help")
        show_help_command
        ;;
    "generate")
        start_generate_command
        ;;
    *)
        write_color_output "Error: " "$RED"
        echo "Unknown command '$1'"
        show_help_command
        exit 1
        ;;
esac